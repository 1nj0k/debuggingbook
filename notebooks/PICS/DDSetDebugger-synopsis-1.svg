<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.40.1 (20161225.0304)
 -->
<!-- Title: %3 Pages: 1 -->
<svg width="435pt" height="361pt"
 viewBox="0.00 0.00 434.50 361.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 357)">
<title>%3</title>
<g id="a_graph0"><a xlink:title="DDSetDebugger class hierarchy">
<polygon fill="#ffffff" stroke="transparent" points="-4,4 -4,-357 430.5,-357 430.5,4 -4,4"/>
</a>
</g>
<!-- DDSetDebugger -->
<g id="node1" class="node">
<title>DDSetDebugger</title>
<g id="a_node1"><a xlink:href="#" xlink:title="class DDSetDebugger:&#10;Debugger implementing the DDSET algorithm&#10;for abstracting failure&#45;inducing inputs">
<polygon fill="none" stroke="#000000" points="2.5,-17 2.5,-103 128.5,-103 128.5,-17 2.5,-17"/>
<text text-anchor="start" x="10.5" y="-88.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">DDSetDebugger</text>
<polyline fill="none" stroke="#000000" points="2.5,-80 128.5,-80 "/>
<g id="a_node1_0"><a xlink:href="#" xlink:title="DDSetDebugger">
<g id="a_node1_1"><a xlink:href="#" xlink:title="__init__(self, grammar, generalizer_class=&lt;class &#39;__main__.TreeGeneralizer&#39;&gt;, parser=None, **kwargs):&#10;Constructor.&#10;`grammar` is an input grammar in fuzzingbook format.&#10;`generalizer_class` is the tree generalizer class to use&#10;(default: TreeGeneralizer)&#10;`parser` is the parser to use (default: `EarleyParser(grammar)`).&#10;All other keyword args are passed to the tree generalizer, notably:&#10;`fuzzer` &#45; the fuzzer to use (default: `GrammarFuzzer`)&#10;`log` &#45; enables debugging output if True.">
<text text-anchor="start" x="29.5" y="-68.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00" fill="#000000">__init__()</text>
</a>
</g>
<g id="a_node1_2"><a xlink:href="#" xlink:title="__repr__(self):&#10;Return a string representation of the generalized call.">
<text text-anchor="start" x="29.5" y="-57.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">__repr__()</text>
</a>
</g>
<g id="a_node1_3"><a xlink:href="#" xlink:title="fuzz(self):&#10;Return a call with arguments randomly instantiated&#10;from the abstract failure&#45;inducing pattern.">
<text text-anchor="start" x="29.5" y="-46.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">fuzz()</text>
</a>
</g>
<g id="a_node1_4"><a xlink:href="#" xlink:title="fuzz_args(self):&#10;Return arguments randomly instantiated&#10;from the abstract failure&#45;inducing pattern.">
<text text-anchor="start" x="29.5" y="-35.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">fuzz_args()</text>
</a>
</g>
<g id="a_node1_5"><a xlink:href="#" xlink:title="generalize(self):&#10;Generalize arguments seen. For each function argument,&#10;produce an abstract failure&#45;inducing input that characterizes&#10;the set of inputs for which the function fails.">
<text text-anchor="start" x="29.5" y="-24.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">generalize()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- CallCollector -->
<g id="node2" class="node">
<title>CallCollector</title>
<g id="a_node2"><a xlink:href="DeltaDebugger.ipynb" xlink:title="class CallCollector:&#10;Collect an exception&#45;raising function call f().&#10;Use as `with CallCollector(): f()`">
<polygon fill="none" stroke="#000000" points="0,-156.5 0,-352.5 131,-352.5 131,-156.5 0,-156.5"/>
<text text-anchor="start" x="20.5" y="-338.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">CallCollector</text>
<polyline fill="none" stroke="#000000" points="0,-329.5 131,-329.5 "/>
<g id="a_node2_6"><a xlink:href="#" xlink:title="CallCollector">
<g id="a_node2_7"><a xlink:href="DeltaDebugger.ipynb" xlink:title="__enter__(self) &#45;&gt; Any:&#10;Called at begin of `with` block. Turn tracing on.">
<text text-anchor="start" x="8.5" y="-318" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">__enter__()</text>
</a>
</g>
<g id="a_node2_8"><a xlink:href="DeltaDebugger.ipynb" xlink:title="__exit__(self, exc_tp:Type, exc_value:BaseException, exc_traceback:traceback) &#45;&gt; Union[bool, NoneType]:&#10;Called at end of `with` block. Turn tracing off.">
<text text-anchor="start" x="8.5" y="-307" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">__exit__()</text>
</a>
</g>
<g id="a_node2_9"><a xlink:href="DeltaDebugger.ipynb" xlink:title="__init__(self) &#45;&gt; None:&#10;Initialize collector">
<text text-anchor="start" x="8.5" y="-296" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00" fill="#000000">__init__()</text>
</a>
</g>
<g id="a_node2_10"><a xlink:href="DeltaDebugger.ipynb" xlink:title="args(self) &#45;&gt; Dict[str, Any]:&#10;Return the dictionary of collected arguments.">
<text text-anchor="start" x="8.5" y="-285" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">args()</text>
</a>
</g>
<g id="a_node2_11"><a xlink:href="DeltaDebugger.ipynb" xlink:title="call(self, new_args:Union[Dict[str, Any], NoneType]=None) &#45;&gt; Any:&#10;Call collected function. If `new_args` is given,&#10;override arguments from its {var: value} entries.">
<text text-anchor="start" x="8.5" y="-274" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">call()</text>
</a>
</g>
<g id="a_node2_12"><a xlink:href="DeltaDebugger.ipynb" xlink:title="exception(self) &#45;&gt; Union[BaseException, NoneType]:&#10;Return the exception produced, or `None` if none.">
<text text-anchor="start" x="8.5" y="-263" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">exception()</text>
</a>
</g>
<g id="a_node2_13"><a xlink:href="DeltaDebugger.ipynb" xlink:title="function(self) &#45;&gt; Callable:&#10;Return the function called.">
<text text-anchor="start" x="8.5" y="-252" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">function()</text>
</a>
</g>
<g id="a_node2_14"><a xlink:href="DeltaDebugger.ipynb" xlink:title="after_collection(self) &#45;&gt; None:&#10;Called after collection. To be defined in subclasses.">
<text text-anchor="start" x="8.5" y="-241" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00" fill="#000000">after_collection()</text>
</a>
</g>
<g id="a_node2_15"><a xlink:href="DeltaDebugger.ipynb" xlink:title="format_call(self, args:Union[Dict[str, Any], NoneType]=None) &#45;&gt; str:&#10;Return a string representing a call of the function with given args.">
<text text-anchor="start" x="8.5" y="-229" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">format_call()</text>
</a>
</g>
<g id="a_node2_16"><a xlink:href="DeltaDebugger.ipynb" xlink:title="format_exception(self, exc:Union[BaseException, NoneType]=None) &#45;&gt; str:&#10;Return a string representing the given exception.">
<text text-anchor="start" x="8.5" y="-218" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">format_exception()</text>
</a>
</g>
<g id="a_node2_17"><a xlink:href="DeltaDebugger.ipynb" xlink:title="init(self) &#45;&gt; None:&#10;Reset for new collection.">
<text text-anchor="start" x="8.5" y="-207" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">init()</text>
</a>
</g>
<g id="a_node2_18"><a xlink:href="DeltaDebugger.ipynb" xlink:title="is_internal_error(self, exc_tp:Type, exc_value:BaseException, exc_traceback:traceback) &#45;&gt; bool:&#10;Return True if exception was raised from `CallCollector` or a subclass.">
<text text-anchor="start" x="8.5" y="-196" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">is_internal_error()</text>
</a>
</g>
<g id="a_node2_19"><a xlink:href="DeltaDebugger.ipynb" xlink:title="search_frame(self, name:str, frame:Union[frame, NoneType]) &#45;&gt; Tuple[Union[frame, NoneType], Union[Callable, NoneType]]:&#10;Return a pair (`frame`, `item`)&#10;in which the function `name` is defined as `item`.">
<text text-anchor="start" x="8.5" y="-185" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">search_frame()</text>
</a>
</g>
<g id="a_node2_20"><a xlink:href="DeltaDebugger.ipynb" xlink:title="search_func(self, name:str, frame:Union[frame, NoneType]) &#45;&gt; Union[Callable, NoneType]:&#10;Search in callers for a definition of the function `name`">
<text text-anchor="start" x="8.5" y="-174" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">search_func()</text>
</a>
</g>
<g id="a_node2_21"><a xlink:href="DeltaDebugger.ipynb" xlink:title="traceit(self, frame:frame, event:str, arg:Any) &#45;&gt; None:&#10;Tracing function. Collect first call, then turn tracing off.">
<text text-anchor="start" x="8.5" y="-163" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">traceit()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- DDSetDebugger&#45;&gt;CallCollector -->
<g id="edge1" class="edge">
<title>DDSetDebugger&#45;&gt;CallCollector</title>
<path fill="none" stroke="#000000" d="M65.5,-103.1659C65.5,-116.1106 65.5,-130.9299 65.5,-146.1161"/>
<polygon fill="none" stroke="#000000" points="62.0001,-146.1326 65.5,-156.1326 69.0001,-146.1327 62.0001,-146.1326"/>
</g>
<!-- TreeGeneralizer -->
<g id="node3" class="node">
<title>TreeGeneralizer</title>
<g id="a_node3"><a xlink:href="#" xlink:title="class TreeGeneralizer:&#10;Determine which parts of a derivation tree can be generalized.">
<polygon fill="none" stroke="#000000" points="147,-.5 147,-119.5 290,-119.5 290,-.5 147,-.5"/>
<text text-anchor="start" x="164" y="-105.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">TreeGeneralizer</text>
<polyline fill="none" stroke="#000000" points="147,-96.5 290,-96.5 "/>
<g id="a_node3_22"><a xlink:href="#" xlink:title="TreeGeneralizer">
<g id="a_node3_23"><a xlink:href="#" xlink:title="__init__(self, grammar:Dict[str, List[Union[str, Tuple[str, Dict[str, Any]]]]], tree:Tuple[str, List[Any]], test:Callable, max_tries_for_generalization:int=10, **kwargs):&#10;Constructor. `grammar` and `tree` are as in `TreeMutator`.&#10;`test` is a function taking a string that either&#10;* raises an exception, indicating test failure;&#10;* or not, indicating test success.&#10;`max_tries_for_generalization` is the number of times&#10;an instantiation has to fail before it is generalized.">
<text text-anchor="start" x="155.5" y="-85.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00" fill="#000000">__init__()</text>
</a>
</g>
<g id="a_node3_24"><a xlink:href="#" xlink:title="can_generalize(self, path, tree=None):&#10;Return True if the subtree at `path` can be generalized.">
<text text-anchor="start" x="155.5" y="-73.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">can_generalize()</text>
</a>
</g>
<g id="a_node3_25"><a xlink:href="#" xlink:title="find_paths(self, predicate:Callable, path:Union[List[int], NoneType]=None, tree:Union[Tuple[str, List[Any]], NoneType]=None):&#10;Return a list of all paths for which `predicate` holds.&#10;`predicate` is a function `predicate`(`path`, `tree`), where&#10;`path` denotes a subtree in `tree`. If `predicate()` returns&#10;True, `path` is included in the returned list.">
<text text-anchor="start" x="155.5" y="-62.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">find_paths()</text>
</a>
</g>
<g id="a_node3_26"><a xlink:href="#" xlink:title="fuzz_tree(self, tree):&#10;Return an instantiated copy of `tree`.">
<text text-anchor="start" x="155.5" y="-51.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">fuzz_tree()</text>
</a>
</g>
<g id="a_node3_27"><a xlink:href="#" xlink:title="generalizable_paths(self):&#10;Return a list of all paths whose subtrees can be generalized.">
<text text-anchor="start" x="155.5" y="-40.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">generalizable_paths()</text>
</a>
</g>
<g id="a_node3_28"><a xlink:href="#" xlink:title="generalize(self):&#10;Returns a copy of the tree in which all generalizable subtrees&#10;are generalized (= replaced by nonterminals without children)">
<text text-anchor="start" x="155.5" y="-29.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">generalize()</text>
</a>
</g>
<g id="a_node3_29"><a xlink:href="#" xlink:title="generalize_path(self, path, tree=None):&#10;Return a copy of the tree in which the subtree at `path`&#10;is generalized (= replaced by a nonterminal without children)">
<text text-anchor="start" x="155.5" y="-18.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">generalize_path()</text>
</a>
</g>
<g id="a_node3_30"><a xlink:href="#" xlink:title="test_tree(self, tree:Tuple[str, List[Any]]):&#10;Return True if testing `tree` passes, else False">
<text text-anchor="start" x="155.5" y="-7.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">test_tree()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- TreeMutator -->
<g id="node4" class="node">
<title>TreeMutator</title>
<g id="a_node4"><a xlink:href="#" xlink:title="class TreeMutator:&#10;Grammar&#45;based mutations of derivation trees.">
<polygon fill="none" stroke="#000000" points="168,-217 168,-292 269,-292 269,-217 168,-217"/>
<text text-anchor="start" x="176" y="-277.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">TreeMutator</text>
<polyline fill="none" stroke="#000000" points="168,-269 269,-269 "/>
<g id="a_node4_31"><a xlink:href="#" xlink:title="TreeMutator">
<g id="a_node4_32"><a xlink:href="#" xlink:title="__init__(self, grammar:Dict[str, List[Union[str, Tuple[str, Dict[str, Any]]]]], tree:Tuple[str, List[Any]], fuzzer:Union[fuzzingbook.GrammarFuzzer.GrammarFuzzer, NoneType]=None, log:int=False):&#10;Constructor.&#10;`grammar` is the underlying grammar;&#10;`tree` is the tree to work on.&#10;`fuzzer` is the grammar fuzzer to use (default: `GrammarFuzzer`)">
<text text-anchor="start" x="179.5" y="-258" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00" fill="#000000">__init__()</text>
</a>
</g>
<g id="a_node4_33"><a xlink:href="#" xlink:title="get_subtree(self, path:List[int], tree:Union[Tuple[str, List[Any]], NoneType]=None) &#45;&gt; Tuple[str, List[Any]]:&#10;Access a subtree based on `path` (a list of children numbers)">
<text text-anchor="start" x="179.5" y="-246" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">get_subtree()</text>
</a>
</g>
<g id="a_node4_34"><a xlink:href="#" xlink:title="mutate(self, path:List[int], tree:Union[Tuple[str, List[Any]], NoneType]=None) &#45;&gt; Tuple[str, List[Any]]:&#10;Return a new tree mutated at `path`">
<text text-anchor="start" x="179.5" y="-235" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">mutate()</text>
</a>
</g>
<g id="a_node4_35"><a xlink:href="#" xlink:title="new_tree(self, start_symbol:str) &#45;&gt; Tuple[str, List[Any]]:&#10;Create a new subtree for &lt;start_symbol&gt;.">
<text text-anchor="start" x="179.5" y="-224" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">new_tree()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- TreeGeneralizer&#45;&gt;TreeMutator -->
<g id="edge2" class="edge">
<title>TreeGeneralizer&#45;&gt;TreeMutator</title>
<path fill="none" stroke="#000000" d="M218.5,-119.6782C218.5,-147.6755 218.5,-180.5822 218.5,-206.8767"/>
<polygon fill="none" stroke="#000000" points="215.0001,-206.9714 218.5,-216.9714 222.0001,-206.9715 215.0001,-206.9714"/>
</g>
<!-- Legend -->
<g id="node5" class="node">
<title>Legend</title>
<text text-anchor="start" x="308.5" y="-77.5" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="10.00" fill="#6a0dad">Legend</text>
<text text-anchor="start" x="308.5" y="-67.5" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="10.00" fill="#000000">• </text>
<text text-anchor="start" x="315.5" y="-67.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="8.00" fill="#000000">public_method()</text>
<text text-anchor="start" x="308.5" y="-57.5" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="10.00" fill="#000000">• </text>
<text text-anchor="start" x="315.5" y="-57.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="8.00" fill="#000000">private_method()</text>
<text text-anchor="start" x="308.5" y="-47.5" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="10.00" fill="#000000">• </text>
<text text-anchor="start" x="315.5" y="-47.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="8.00" fill="#000000">overloaded_method()</text>
<text text-anchor="start" x="308.5" y="-38.3" font-family="Helvetica,sans-Serif" font-size="9.00" fill="#000000">Hover over names to see doc</text>
</g>
</g>
</svg>
