<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.40.1 (20161225.0304)
 -->
<!-- Title: %3 Pages: 1 -->
<svg width="581pt" height="332pt"
 viewBox="0.00 0.00 581.00 332.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 328)">
<title>%3</title>
<g id="a_graph0"><a xlink:title="Repairer class hierarchy">
<polygon fill="#ffffff" stroke="transparent" points="-4,4 -4,-328 577,-328 577,4 -4,4"/>
</a>
</g>
<!-- Repairer -->
<g id="node1" class="node">
<title>Repairer</title>
<g id="a_node1"><a xlink:href="#" xlink:title="class Repairer">
<polygon fill="none" stroke="#000000" points="20.5,-6 20.5,-48 97.5,-48 97.5,-6 20.5,-6"/>
<text text-anchor="start" x="30" y="-33.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">Repairer</text>
<polyline fill="none" stroke="#000000" points="20.5,-25 97.5,-25 "/>
<g id="a_node1_0"><a xlink:href="#" xlink:title="Repairer">
<g id="a_node1_1"><a xlink:href="#" xlink:title="__init__(self, debugger, targets=None, sources=None, log=False, mutator_class=&lt;class &#39;__main__.StatementMutator&#39;&gt;, crossover_class=&lt;class &#39;__main__.CrossoverOperator&#39;&gt;, reducer_class=&lt;class &#39;DeltaDebugger.DeltaDebugger&#39;&gt;, globals=None):&#10; &#160;&#160;&#160;Constructor.&#10; &#160;&#160;&#160;`debugger`: a `DifferenceDebugger` to take tests and coverage from.&#10; &#160;&#160;&#160;`targets`: a list of functions/modules to be repaired.&#10; &#160;&#160;&#160;(default: the covered functions in `debugger`, except tests)&#10; &#160;&#160;&#160;`sources`: a list of functions/modules to take repairs from.&#10; &#160;&#160;&#160;(default: same as `targets`)&#10; &#160;&#160;&#160;`globals`: if given, a `globals()` dict for executing targets&#10; &#160;&#160;&#160;(default: `globals()` of caller)">
<text text-anchor="start" x="29" y="-13.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00" fill="#000000">__init__()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- StackInspector -->
<g id="node2" class="node">
<title>StackInspector</title>
<g id="a_node2"><a xlink:href="Slicer.ipynb" xlink:title="class StackInspector:&#10; &#160;&#160;&#160;Provide functions to inspect the stack">
<polygon fill="none" stroke="#000000" points="0,-90.5 0,-154.5 118,-154.5 118,-90.5 0,-90.5"/>
<text text-anchor="start" x="8" y="-140.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">StackInspector</text>
<polyline fill="none" stroke="#000000" points="0,-131.5 118,-131.5 "/>
<g id="a_node2_2"><a xlink:href="#" xlink:title="StackInspector">
<g id="a_node2_3"><a xlink:href="Slicer.ipynb" xlink:title="caller_frame(self):&#10; &#160;&#160;&#160;Return the frame of the caller.">
<text text-anchor="start" x="11" y="-119" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">caller_frame()</text>
</a>
</g>
<g id="a_node2_4"><a xlink:href="Slicer.ipynb" xlink:title="caller_globals(self):&#10; &#160;&#160;&#160;Return the globals() environment of the caller.">
<text text-anchor="start" x="11" y="-108" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">caller_globals()</text>
</a>
</g>
<g id="a_node2_5"><a xlink:href="Slicer.ipynb" xlink:title="caller_locals(self):&#10; &#160;&#160;&#160;Return the locals() environment of the caller.">
<text text-anchor="start" x="11" y="-97" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">caller_locals()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- Repairer&#45;&gt;StackInspector -->
<g id="edge1" class="edge">
<title>Repairer&#45;&gt;StackInspector</title>
<path fill="none" stroke="#000000" d="M59,-48.1945C59,-57.7028 59,-69.271 59,-80.4207"/>
<polygon fill="none" stroke="#000000" points="55.5001,-80.4716 59,-90.4716 62.5001,-80.4716 55.5001,-80.4716"/>
</g>
<!-- ConditionMutator -->
<g id="node3" class="node">
<title>ConditionMutator</title>
<g id="a_node3"><a xlink:href="#" xlink:title="class ConditionMutator:&#10; &#160;&#160;&#160;Mutate conditions in an AST">
<polygon fill="none" stroke="#000000" points="139.5,-.5 139.5,-53.5 274.5,-53.5 274.5,-.5 139.5,-.5"/>
<text text-anchor="start" x="147.5" y="-39.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">ConditionMutator</text>
<polyline fill="none" stroke="#000000" points="139.5,-30.5 274.5,-30.5 "/>
<g id="a_node3_6"><a xlink:href="#" xlink:title="ConditionMutator">
<g id="a_node3_7"><a xlink:href="#" xlink:title="__init__(self, *args, **kwargs):&#10; &#160;&#160;&#160;Constructor. Arguments are as with `StatementMutator` constructor.">
<text text-anchor="start" x="153" y="-19.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00" fill="#000000">__init__()</text>
</a>
</g>
<g id="a_node3_8"><a xlink:href="#" xlink:title="choose_condition(self):&#10; &#160;&#160;&#160;Return a random condition from source.">
<text text-anchor="start" x="153" y="-7.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">choose_condition()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- StatementMutator -->
<g id="node4" class="node">
<title>StatementMutator</title>
<g id="a_node4"><a xlink:href="#" xlink:title="class StatementMutator:&#10; &#160;&#160;&#160;Mutate statements in an AST for automated repair.">
<polygon fill="none" stroke="#000000" points="136.5,-101.5 136.5,-143.5 277.5,-143.5 277.5,-101.5 136.5,-101.5"/>
<text text-anchor="start" x="144.5" y="-129.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">StatementMutator</text>
<polyline fill="none" stroke="#000000" points="136.5,-120.5 277.5,-120.5 "/>
<g id="a_node4_9"><a xlink:href="#" xlink:title="StatementMutator">
<g id="a_node4_10"><a xlink:href="#" xlink:title="__init__(self, suspiciousness_func=None, source=None, log=False):&#10; &#160;&#160;&#160;Constructor.&#10; &#160;&#160;&#160;`suspiciousness_func` is a function that takes a location&#10; &#160;&#160;&#160;(function, line_number) and returns a suspiciousness value&#10; &#160;&#160;&#160;between 0 and 1.0. If not given, all locations get the&#10; &#160;&#160;&#160;same suspiciousness of 1.0.&#10; &#160;&#160;&#160;`source` is a list of statements to choose from.">
<text text-anchor="start" x="177" y="-109" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00" fill="#000000">__init__()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- ConditionMutator&#45;&gt;StatementMutator -->
<g id="edge2" class="edge">
<title>ConditionMutator&#45;&gt;StatementMutator</title>
<path fill="none" stroke="#000000" d="M207,-53.6021C207,-65.2982 207,-79.1157 207,-91.2947"/>
<polygon fill="none" stroke="#000000" points="203.5001,-91.4812 207,-101.4812 210.5001,-91.4812 203.5001,-91.4812"/>
</g>
<!-- NodeTransformer -->
<g id="node5" class="node">
<title>NodeTransformer</title>
<g id="a_node5"><a xlink:href="ast.ipynb" xlink:title="class NodeTransformer:&#10; &#160;&#160;&#160;&#10; &#160;&#160;&#160;A :class:`NodeVisitor` subclass that walks the abstract syntax tree and&#10; &#160;&#160;&#160;allows modification of nodes.&#10; &#160;&#160;&#160;&#10; &#160;&#160;&#160;The `NodeTransformer` will walk the AST and use the return value of the&#10; &#160;&#160;&#160;visitor methods to replace or remove the old node. &#160;If the return value of&#10; &#160;&#160;&#160;the visitor method is ``None``, the node will be removed from its location,&#10; &#160;&#160;&#160;otherwise it is replaced with the return value. &#160;The return value may be the&#10; &#160;&#160;&#160;original node in which case no replacement takes place.&#10; &#160;&#160;&#160;&#10; &#160;&#160;&#160;Here is an example transformer that rewrites all occurrences of name lookups&#10; &#160;&#160;&#160;(``foo``) to ``data[&#39;foo&#39;]``::&#10; &#160;&#160;&#160;&#10; &#160;&#160;&#160;class RewriteName(NodeTransformer):&#10; &#160;&#160;&#160;&#10; &#160;&#160;&#160;def visit_Name(self, node):&#10; &#160;&#160;&#160;return copy_location(Subscript(&#10; &#160;&#160;&#160;value=Name(id=&#39;data&#39;, ctx=Load()),&#10; &#160;&#160;&#160;slice=Index(value=Str(s=node.id)),&#10; &#160;&#160;&#160;ctx=node.ctx&#10; &#160;&#160;&#160;), node)&#10; &#160;&#160;&#160;&#10; &#160;&#160;&#160;Keep in mind that if the node you&#39;re operating on has child nodes you must&#10; &#160;&#160;&#160;either transform the child nodes yourself or call the :meth:`generic_visit`&#10; &#160;&#160;&#160;method for the node first.&#10; &#160;&#160;&#160;&#10; &#160;&#160;&#160;For nodes that were part of a collection of statements (that applies to all&#10; &#160;&#160;&#160;statement nodes), the visitor may also return a list of nodes rather than&#10; &#160;&#160;&#160;just a single node.&#10; &#160;&#160;&#160;&#10; &#160;&#160;&#160;Usually you use the transformer like this::&#10; &#160;&#160;&#160;&#10; &#160;&#160;&#160;node = YourTransformer().visit(node)&#10; &#160;&#160;&#160;">
<polygon fill="none" stroke="#000000" points="139,-191.5 139,-233.5 275,-233.5 275,-191.5 139,-191.5"/>
<text text-anchor="start" x="147" y="-219.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">NodeTransformer</text>
<polyline fill="none" stroke="#000000" points="139,-210.5 275,-210.5 "/>
<g id="a_node5_11"><a xlink:href="#" xlink:title="NodeTransformer">
<g id="a_node5_12"><a xlink:href="ast.ipynb" xlink:title="generic_visit(self, node)">
<text text-anchor="start" x="162" y="-199" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00" fill="#000000">generic_visit()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- StatementMutator&#45;&gt;NodeTransformer -->
<g id="edge3" class="edge">
<title>StatementMutator&#45;&gt;NodeTransformer</title>
<path fill="none" stroke="#000000" d="M207,-143.8287C207,-154.925 207,-168.7058 207,-181.0036"/>
<polygon fill="none" stroke="#000000" points="203.5001,-181.3243 207,-191.3244 210.5001,-181.3244 203.5001,-181.3243"/>
</g>
<!-- NodeVisitor -->
<g id="node6" class="node">
<title>NodeVisitor</title>
<g id="a_node6"><a xlink:href="ast.ipynb" xlink:title="class NodeVisitor:&#10; &#160;&#160;&#160;&#10; &#160;&#160;&#160;A node visitor base class that walks the abstract syntax tree and calls a&#10; &#160;&#160;&#160;visitor function for every node found. &#160;This function may return a value&#10; &#160;&#160;&#160;which is forwarded by the `visit` method.&#10; &#160;&#160;&#160;&#10; &#160;&#160;&#160;This class is meant to be subclassed, with the subclass adding visitor&#10; &#160;&#160;&#160;methods.&#10; &#160;&#160;&#160;&#10; &#160;&#160;&#160;Per default the visitor functions for the nodes are ``&#39;visit_&#39;`` +&#10; &#160;&#160;&#160;class name of the node. &#160;So a `TryFinally` node visit function would&#10; &#160;&#160;&#160;be `visit_TryFinally`. &#160;This behavior can be changed by overriding&#10; &#160;&#160;&#160;the `visit` method. &#160;If no visitor function exists for a node&#10; &#160;&#160;&#160;(return value `None`) the `generic_visit` visitor is used instead.&#10; &#160;&#160;&#160;&#10; &#160;&#160;&#160;Don&#39;t use the `NodeVisitor` if you want to apply changes to nodes during&#10; &#160;&#160;&#160;traversing. &#160;For this a special visitor exists (`NodeTransformer`) that&#10; &#160;&#160;&#160;allows modifications.&#10; &#160;&#160;&#160;">
<polygon fill="none" stroke="#000000" points="153.5,-270.5 153.5,-323.5 260.5,-323.5 260.5,-270.5 153.5,-270.5"/>
<text text-anchor="start" x="167" y="-309.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">NodeVisitor</text>
<polyline fill="none" stroke="#000000" points="153.5,-300.5 260.5,-300.5 "/>
<g id="a_node6_13"><a xlink:href="#" xlink:title="NodeVisitor">
<g id="a_node6_14"><a xlink:href="ast.ipynb" xlink:title="generic_visit(self, node):&#10; &#160;&#160;&#160;Called if no explicit visitor function exists for a node.">
<text text-anchor="start" x="162" y="-289.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00" fill="#000000">generic_visit()</text>
</a>
</g>
<g id="a_node6_15"><a xlink:href="ast.ipynb" xlink:title="visit(self, node):&#10; &#160;&#160;&#160;Visit a node.">
<text text-anchor="start" x="162" y="-277.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">visit()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- NodeTransformer&#45;&gt;NodeVisitor -->
<g id="edge4" class="edge">
<title>NodeTransformer&#45;&gt;NodeVisitor</title>
<path fill="none" stroke="#000000" d="M207,-233.8229C207,-241.7647 207,-251.0263 207,-259.9709"/>
<polygon fill="none" stroke="#000000" points="203.5001,-260.2274 207,-270.2274 210.5001,-260.2274 203.5001,-260.2274"/>
</g>
<!-- CrossoverOperator -->
<g id="node7" class="node">
<title>CrossoverOperator</title>
<g id="a_node7"><a xlink:href="#" xlink:title="class CrossoverOperator">
<polygon fill="none" stroke="#000000" points="293,-.5 293,-53.5 437,-53.5 437,-.5 293,-.5"/>
<text text-anchor="start" x="301" y="-39.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">CrossoverOperator</text>
<polyline fill="none" stroke="#000000" points="293,-30.5 437,-30.5 "/>
<g id="a_node7_16"><a xlink:href="#" xlink:title="CrossoverOperator">
<g id="a_node7_17"><a xlink:href="#" xlink:title="__init__(self, log=False):&#10; &#160;&#160;&#160;Constructor. If `log` is set, turn on logging.">
<text text-anchor="start" x="323" y="-19.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">__init__()</text>
</a>
</g>
<g id="a_node7_18"><a xlink:href="#" xlink:title="cross_bodies(self, body_1, body_2):&#10; &#160;&#160;&#160;CrossoverOperator the statement lists `body_1` x `body_2`.&#10; &#160;&#160;&#160;Return new lists.&#10; &#160;&#160;&#160;">
<text text-anchor="start" x="323" y="-7.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">cross_bodies()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- Legend -->
<g id="node8" class="node">
<title>Legend</title>
<text text-anchor="start" x="455" y="-44.5" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="10.00" fill="#6a0dad">Legend</text>
<text text-anchor="start" x="455" y="-34.5" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="10.00" fill="#000000">• </text>
<text text-anchor="start" x="462" y="-34.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="8.00" fill="#000000">public_method()</text>
<text text-anchor="start" x="455" y="-24.5" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="10.00" fill="#000000">• </text>
<text text-anchor="start" x="462" y="-24.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="8.00" fill="#000000">private_method()</text>
<text text-anchor="start" x="455" y="-14.5" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="10.00" fill="#000000">• </text>
<text text-anchor="start" x="462" y="-14.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="8.00" fill="#000000">overloaded_method()</text>
<text text-anchor="start" x="455" y="-5.3" font-family="Helvetica,sans-Serif" font-size="9.00" fill="#000000">Hover over names to see doc</text>
</g>
</g>
</svg>
