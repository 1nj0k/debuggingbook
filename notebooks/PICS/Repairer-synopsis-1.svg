<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.40.1 (20161225.0304)
 -->
<!-- Title: %3 Pages: 1 -->
<svg width="583pt" height="409pt"
 viewBox="0.00 0.00 582.50 409.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 405)">
<title>%3</title>
<g id="a_graph0"><a xlink:title="Repairer class hierarchy">
<polygon fill="#ffffff" stroke="transparent" points="-4,4 -4,-405 578.5,-405 578.5,4 -4,4"/>
</a>
</g>
<!-- Repairer -->
<g id="node1" class="node">
<title>Repairer</title>
<g id="a_node1"><a xlink:href="#" xlink:title="class Repairer">
<polygon fill="none" stroke="#000000" points="18,-11.5 18,-64.5 101,-64.5 101,-11.5 18,-11.5"/>
<text text-anchor="start" x="30.5" y="-50.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">Repairer</text>
<polyline fill="none" stroke="#000000" points="18,-41.5 101,-41.5 "/>
<g id="a_node1_0"><a xlink:href="#" xlink:title="Repairer">
<g id="a_node1_1"><a xlink:href="#" xlink:title="__init__(self, debugger, targets=None, sources=None, log=False, mutator_class=&lt;class &#39;__main__.StatementMutator&#39;&gt;, crossover_class=&lt;class &#39;__main__.CrossoverOperator&#39;&gt;, reducer_class=&lt;class &#39;DeltaDebugger.DeltaDebugger&#39;&gt;, globals=None):&#10; &#160;&#160;&#160;Constructor.&#10; &#160;&#160;&#160;`debugger`: a `DifferenceDebugger` to take tests and coverage from.&#10; &#160;&#160;&#160;`targets`: a list of functions/modules to be repaired.&#10; &#160;&#160;&#160;(default: the covered functions in `debugger`, except tests)&#10; &#160;&#160;&#160;`sources`: a list of functions/modules to take repairs from.&#10; &#160;&#160;&#160;(default: same as `targets`)&#10; &#160;&#160;&#160;`globals`: if given, a `globals()` dict for executing targets&#10; &#160;&#160;&#160;(default: `globals()` of caller)">
<text text-anchor="start" x="26.5" y="-30.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00" fill="#000000">__init__()</text>
</a>
</g>
<g id="a_node1_2"><a xlink:href="#" xlink:title="getsource(self, item):&#10; &#160;&#160;&#160;Get the source for `item`. Can also be a string.">
<text text-anchor="start" x="26.5" y="-18.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">getsource()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- StackInspector -->
<g id="node2" class="node">
<title>StackInspector</title>
<g id="a_node2"><a xlink:href="Slicer.ipynb" xlink:title="class StackInspector:&#10; &#160;&#160;&#160;Provide functions to inspect the stack">
<polygon fill="none" stroke="#000000" points="0,-112.5 0,-231.5 119,-231.5 119,-112.5 0,-112.5"/>
<text text-anchor="start" x="8.5" y="-217.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">StackInspector</text>
<polyline fill="none" stroke="#000000" points="0,-208.5 119,-208.5 "/>
<g id="a_node2_3"><a xlink:href="#" xlink:title="StackInspector">
<g id="a_node2_4"><a xlink:href="Slicer.ipynb" xlink:title="caller_frame(self):&#10; &#160;&#160;&#160;Return the frame of the caller.">
<text text-anchor="start" x="8.5" y="-196.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">caller_frame()</text>
</a>
</g>
<g id="a_node2_5"><a xlink:href="Slicer.ipynb" xlink:title="caller_function(self):&#10; &#160;&#160;&#160;Return the calling function">
<text text-anchor="start" x="8.5" y="-185.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">caller_function()</text>
</a>
</g>
<g id="a_node2_6"><a xlink:href="Slicer.ipynb" xlink:title="caller_globals(self):&#10; &#160;&#160;&#160;Return the globals() environment of the caller.">
<text text-anchor="start" x="8.5" y="-174.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">caller_globals()</text>
</a>
</g>
<g id="a_node2_7"><a xlink:href="Slicer.ipynb" xlink:title="caller_locals(self):&#10; &#160;&#160;&#160;Return the locals() environment of the caller.">
<text text-anchor="start" x="8.5" y="-163.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">caller_locals()</text>
</a>
</g>
<g id="a_node2_8"><a xlink:href="Slicer.ipynb" xlink:title="caller_location(self):&#10; &#160;&#160;&#160;Return the location (func, lineno) of the caller.">
<text text-anchor="start" x="8.5" y="-152.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">caller_location()</text>
</a>
</g>
<g id="a_node2_9"><a xlink:href="Slicer.ipynb" xlink:title="search_frame(self, name):&#10; &#160;&#160;&#160;Return a pair (`frame`, `item`)&#10; &#160;&#160;&#160;in which the function `name` is defined as `item`.">
<text text-anchor="start" x="8.5" y="-141.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">search_frame()</text>
</a>
</g>
<g id="a_node2_10"><a xlink:href="Slicer.ipynb" xlink:title="search_func(self, name):&#10; &#160;&#160;&#160;Search in callers for a definition of the function `name`">
<text text-anchor="start" x="8.5" y="-130.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">search_func()</text>
</a>
</g>
<g id="a_node2_11"><a xlink:href="Slicer.ipynb" xlink:title="unknown()">
<text text-anchor="start" x="8.5" y="-119.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">unknown()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- Repairer&#45;&gt;StackInspector -->
<g id="edge1" class="edge">
<title>Repairer&#45;&gt;StackInspector</title>
<path fill="none" stroke="#000000" d="M59.5,-64.7948C59.5,-75.6892 59.5,-88.8341 59.5,-102.1299"/>
<polygon fill="none" stroke="#000000" points="56.0001,-102.292 59.5,-112.292 63.0001,-102.292 56.0001,-102.292"/>
</g>
<!-- ConditionMutator -->
<g id="node3" class="node">
<title>ConditionMutator</title>
<g id="a_node3"><a xlink:href="#" xlink:title="class ConditionMutator:&#10; &#160;&#160;&#160;Mutate conditions in an AST">
<polygon fill="none" stroke="#000000" points="141,-.5 141,-75.5 276,-75.5 276,-.5 141,-.5"/>
<text text-anchor="start" x="149" y="-61.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">ConditionMutator</text>
<polyline fill="none" stroke="#000000" points="141,-52.5 276,-52.5 "/>
<g id="a_node3_12"><a xlink:href="#" xlink:title="ConditionMutator">
<g id="a_node3_13"><a xlink:href="#" xlink:title="__init__(self, *args, **kwargs):&#10; &#160;&#160;&#160;Constructor. Arguments are as with `StatementMutator` constructor.">
<text text-anchor="start" x="154.5" y="-41.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00" fill="#000000">__init__()</text>
</a>
</g>
<g id="a_node3_14"><a xlink:href="#" xlink:title="choose_bool_op(self)">
<text text-anchor="start" x="154.5" y="-29.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">choose_bool_op()</text>
</a>
</g>
<g id="a_node3_15"><a xlink:href="#" xlink:title="choose_condition(self):&#10; &#160;&#160;&#160;Return a random condition from source.">
<text text-anchor="start" x="154.5" y="-18.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">choose_condition()</text>
</a>
</g>
<g id="a_node3_16"><a xlink:href="#" xlink:title="swap(self, node):&#10; &#160;&#160;&#160;Replace `node` condition by a condition from `source`">
<text text-anchor="start" x="154.5" y="-7.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">swap()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- StatementMutator -->
<g id="node4" class="node">
<title>StatementMutator</title>
<g id="a_node4"><a xlink:href="#" xlink:title="class StatementMutator:&#10; &#160;&#160;&#160;Mutate statements in an AST for automated repair.">
<polygon fill="none" stroke="#000000" points="137,-145.5 137,-198.5 280,-198.5 280,-145.5 137,-145.5"/>
<text text-anchor="start" x="146" y="-184.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">StatementMutator</text>
<polyline fill="none" stroke="#000000" points="137,-175.5 280,-175.5 "/>
<g id="a_node4_17"><a xlink:href="#" xlink:title="StatementMutator">
<g id="a_node4_18"><a xlink:href="#" xlink:title="__init__(self, suspiciousness_func=None, source=None, log=False):&#10; &#160;&#160;&#160;Constructor.&#10; &#160;&#160;&#160;`suspiciousness_func` is a function that takes a location&#10; &#160;&#160;&#160;(function, line_number) and returns a suspiciousness value&#10; &#160;&#160;&#160;between 0 and 1.0. If not given, all locations get the&#10; &#160;&#160;&#160;same suspiciousness of 1.0.&#10; &#160;&#160;&#160;`source` is a list of statements to choose from.">
<text text-anchor="start" x="145.5" y="-164.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00" fill="#000000">__init__()</text>
</a>
</g>
<g id="a_node4_19"><a xlink:href="#" xlink:title="node_suspiciousness(self, stmt, func_name)">
<text text-anchor="start" x="145.5" y="-152.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">node_suspiciousness()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- ConditionMutator&#45;&gt;StatementMutator -->
<g id="edge2" class="edge">
<title>ConditionMutator&#45;&gt;StatementMutator</title>
<path fill="none" stroke="#000000" d="M208.5,-75.6831C208.5,-94.2766 208.5,-116.6223 208.5,-135.1076"/>
<polygon fill="none" stroke="#000000" points="205.0001,-135.2089 208.5,-145.2089 212.0001,-135.209 205.0001,-135.2089"/>
</g>
<!-- NodeTransformer -->
<g id="node5" class="node">
<title>NodeTransformer</title>
<g id="a_node5"><a xlink:href="ast.ipynb" xlink:title="class NodeTransformer:&#10; &#160;&#160;&#160;&#10; &#160;&#160;&#160;A :class:`NodeVisitor` subclass that walks the abstract syntax tree and&#10; &#160;&#160;&#160;allows modification of nodes.&#10; &#160;&#160;&#160;&#10; &#160;&#160;&#160;The `NodeTransformer` will walk the AST and use the return value of the&#10; &#160;&#160;&#160;visitor methods to replace or remove the old node. &#160;If the return value of&#10; &#160;&#160;&#160;the visitor method is ``None``, the node will be removed from its location,&#10; &#160;&#160;&#160;otherwise it is replaced with the return value. &#160;The return value may be the&#10; &#160;&#160;&#160;original node in which case no replacement takes place.&#10; &#160;&#160;&#160;&#10; &#160;&#160;&#160;Here is an example transformer that rewrites all occurrences of name lookups&#10; &#160;&#160;&#160;(``foo``) to ``data[&#39;foo&#39;]``::&#10; &#160;&#160;&#160;&#10; &#160;&#160;&#160;class RewriteName(NodeTransformer):&#10; &#160;&#160;&#160;&#10; &#160;&#160;&#160;def visit_Name(self, node):&#10; &#160;&#160;&#160;return copy_location(Subscript(&#10; &#160;&#160;&#160;value=Name(id=&#39;data&#39;, ctx=Load()),&#10; &#160;&#160;&#160;slice=Index(value=Str(s=node.id)),&#10; &#160;&#160;&#160;ctx=node.ctx&#10; &#160;&#160;&#160;), node)&#10; &#160;&#160;&#160;&#10; &#160;&#160;&#160;Keep in mind that if the node you&#39;re operating on has child nodes you must&#10; &#160;&#160;&#160;either transform the child nodes yourself or call the :meth:`generic_visit`&#10; &#160;&#160;&#160;method for the node first.&#10; &#160;&#160;&#160;&#10; &#160;&#160;&#160;For nodes that were part of a collection of statements (that applies to all&#10; &#160;&#160;&#160;statement nodes), the visitor may also return a list of nodes rather than&#10; &#160;&#160;&#160;just a single node.&#10; &#160;&#160;&#160;&#10; &#160;&#160;&#160;Usually you use the transformer like this::&#10; &#160;&#160;&#160;&#10; &#160;&#160;&#160;node = YourTransformer().visit(node)&#10; &#160;&#160;&#160;">
<polygon fill="none" stroke="#000000" points="140.5,-268.5 140.5,-310.5 276.5,-310.5 276.5,-268.5 140.5,-268.5"/>
<text text-anchor="start" x="148.5" y="-296.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">NodeTransformer</text>
<polyline fill="none" stroke="#000000" points="140.5,-287.5 276.5,-287.5 "/>
<g id="a_node5_20"><a xlink:href="#" xlink:title="NodeTransformer">
<g id="a_node5_21"><a xlink:href="ast.ipynb" xlink:title="generic_visit(self, node)">
<text text-anchor="start" x="163.5" y="-276" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00" fill="#000000">generic_visit()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- StatementMutator&#45;&gt;NodeTransformer -->
<g id="edge3" class="edge">
<title>StatementMutator&#45;&gt;NodeTransformer</title>
<path fill="none" stroke="#000000" d="M208.5,-198.6626C208.5,-216.4047 208.5,-239.7787 208.5,-258.373"/>
<polygon fill="none" stroke="#000000" points="205.0001,-258.417 208.5,-268.4171 212.0001,-258.4171 205.0001,-258.417"/>
</g>
<!-- NodeVisitor -->
<g id="node6" class="node">
<title>NodeVisitor</title>
<g id="a_node6"><a xlink:href="ast.ipynb" xlink:title="class NodeVisitor:&#10; &#160;&#160;&#160;&#10; &#160;&#160;&#160;A node visitor base class that walks the abstract syntax tree and calls a&#10; &#160;&#160;&#160;visitor function for every node found. &#160;This function may return a value&#10; &#160;&#160;&#160;which is forwarded by the `visit` method.&#10; &#160;&#160;&#160;&#10; &#160;&#160;&#160;This class is meant to be subclassed, with the subclass adding visitor&#10; &#160;&#160;&#160;methods.&#10; &#160;&#160;&#160;&#10; &#160;&#160;&#160;Per default the visitor functions for the nodes are ``&#39;visit_&#39;`` +&#10; &#160;&#160;&#160;class name of the node. &#160;So a `TryFinally` node visit function would&#10; &#160;&#160;&#160;be `visit_TryFinally`. &#160;This behavior can be changed by overriding&#10; &#160;&#160;&#160;the `visit` method. &#160;If no visitor function exists for a node&#10; &#160;&#160;&#160;(return value `None`) the `generic_visit` visitor is used instead.&#10; &#160;&#160;&#160;&#10; &#160;&#160;&#160;Don&#39;t use the `NodeVisitor` if you want to apply changes to nodes during&#10; &#160;&#160;&#160;traversing. &#160;For this a special visitor exists (`NodeTransformer`) that&#10; &#160;&#160;&#160;allows modifications.&#10; &#160;&#160;&#160;">
<polygon fill="none" stroke="#000000" points="155,-347.5 155,-400.5 262,-400.5 262,-347.5 155,-347.5"/>
<text text-anchor="start" x="168.5" y="-386.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">NodeVisitor</text>
<polyline fill="none" stroke="#000000" points="155,-377.5 262,-377.5 "/>
<g id="a_node6_22"><a xlink:href="#" xlink:title="NodeVisitor">
<g id="a_node6_23"><a xlink:href="ast.ipynb" xlink:title="generic_visit(self, node):&#10; &#160;&#160;&#160;Called if no explicit visitor function exists for a node.">
<text text-anchor="start" x="163.5" y="-366.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00" fill="#000000">generic_visit()</text>
</a>
</g>
<g id="a_node6_24"><a xlink:href="ast.ipynb" xlink:title="visit(self, node):&#10; &#160;&#160;&#160;Visit a node.">
<text text-anchor="start" x="163.5" y="-354.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">visit()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- NodeTransformer&#45;&gt;NodeVisitor -->
<g id="edge4" class="edge">
<title>NodeTransformer&#45;&gt;NodeVisitor</title>
<path fill="none" stroke="#000000" d="M208.5,-310.8229C208.5,-318.7647 208.5,-328.0263 208.5,-336.9709"/>
<polygon fill="none" stroke="#000000" points="205.0001,-337.2274 208.5,-347.2274 212.0001,-337.2274 205.0001,-337.2274"/>
</g>
<!-- CrossoverOperator -->
<g id="node7" class="node">
<title>CrossoverOperator</title>
<g id="a_node7"><a xlink:href="#" xlink:title="class CrossoverOperator">
<polygon fill="none" stroke="#000000" points="294.5,-6 294.5,-70 438.5,-70 438.5,-6 294.5,-6"/>
<text text-anchor="start" x="302.5" y="-55.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">CrossoverOperator</text>
<polyline fill="none" stroke="#000000" points="294.5,-47 438.5,-47 "/>
<g id="a_node7_25"><a xlink:href="#" xlink:title="CrossoverOperator">
<g id="a_node7_26"><a xlink:href="#" xlink:title="__init__(self, log=False):&#10; &#160;&#160;&#160;Constructor. If `log` is set, turn on logging.">
<text text-anchor="start" x="324.5" y="-35.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">__init__()</text>
</a>
</g>
<g id="a_node7_27"><a xlink:href="#" xlink:title="can_cross(self, tree, body_attr=&#39;body&#39;)">
<text text-anchor="start" x="324.5" y="-23.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">can_cross()</text>
</a>
</g>
<g id="a_node7_28"><a xlink:href="#" xlink:title="cross_bodies(self, body_1, body_2):&#10; &#160;&#160;&#160;CrossoverOperator the statement lists `body_1` x `body_2`.&#10; &#160;&#160;&#160;Return new lists.&#10; &#160;&#160;&#160;">
<text text-anchor="start" x="324.5" y="-12.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">cross_bodies()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- Legend -->
<g id="node8" class="node">
<title>Legend</title>
<text text-anchor="start" x="456.5" y="-55.5" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="10.00" fill="#6a0dad">Legend</text>
<text text-anchor="start" x="456.5" y="-45.5" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="10.00" fill="#000000">• </text>
<text text-anchor="start" x="463.5" y="-45.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="8.00" fill="#000000">public_method()</text>
<text text-anchor="start" x="456.5" y="-35.5" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="10.00" fill="#000000">• </text>
<text text-anchor="start" x="463.5" y="-35.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="8.00" fill="#000000">private_method()</text>
<text text-anchor="start" x="456.5" y="-25.5" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="10.00" fill="#000000">• </text>
<text text-anchor="start" x="463.5" y="-25.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="8.00" fill="#000000">overloaded_method()</text>
<text text-anchor="start" x="456.5" y="-16.3" font-family="Helvetica,sans-Serif" font-size="9.00" fill="#000000">Hover over names to see doc</text>
</g>
</g>
</svg>
