<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.40.1 (20161225.0304)
 -->
<!-- Title: %3 Pages: 1 -->
<svg width="864pt" height="268pt"
 viewBox="0.00 0.00 864.00 268.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 264)">
<title>%3</title>
<polygon fill="#ffffff" stroke="transparent" points="-4,4 -4,-264 860,-264 860,4 -4,4"/>
<!-- Tracer -->
<g id="node1" class="node">
<title>Tracer</title>
<g id="a_node1"><a xlink:href="Tracer.ipynb" xlink:title="Tracing Executions (Tracer)&#10;&#10;In this chapter, we show how to observe program state during an execution – a prerequisite for logging and interactive debugging. Thanks to the power of Python, we can do this in a few lines of code.">
<polygon fill="#ffffff" stroke="#000000" points="465.5,-185 331.5,-185 331.5,-149 471.5,-149 471.5,-179 465.5,-185"/>
<polyline fill="none" stroke="#000000" points="465.5,-185 465.5,-179 "/>
<polyline fill="none" stroke="#000000" points="471.5,-179 465.5,-179 "/>
<text text-anchor="middle" x="401.5" y="-163.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Tracing Executions</text>
</a>
</g>
</g>
<!-- Debugger -->
<g id="node2" class="node">
<title>Debugger</title>
<g id="a_node2"><a xlink:href="Debugger.ipynb" xlink:title="How Debuggers Work (Debugger)&#10;&#10;Interactive debuggers are tools that allow you to selectively observe the program state during an execution. &#160;In this chapter, you will learn how such debuggers work – by building your own debugger.">
<polygon fill="#ffffff" stroke="#000000" points="402,-111 247,-111 247,-75 408,-75 408,-105 402,-111"/>
<polyline fill="none" stroke="#000000" points="402,-111 402,-105 "/>
<polyline fill="none" stroke="#000000" points="408,-105 402,-105 "/>
<text text-anchor="middle" x="327.5" y="-89.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">How Debuggers Work</text>
</a>
</g>
</g>
<!-- Tracer&#45;&gt;Debugger -->
<g id="edge1" class="edge">
<title>Tracer&#45;&gt;Debugger</title>
<path fill="none" stroke="#000000" d="M383.2079,-148.7079C374.0674,-139.5674 362.8599,-128.3599 352.9,-118.4"/>
<polygon fill="#000000" stroke="#000000" points="355.1277,-115.6779 345.5817,-111.0817 350.1779,-120.6277 355.1277,-115.6779"/>
</g>
<!-- Assertions -->
<g id="node3" class="node">
<title>Assertions</title>
<g id="a_node3"><a xlink:href="Assertions.ipynb" xlink:title="Asserting Expectations (Assertions)&#10;&#10;In the previous chapters on tracing and interactive debugging, we have seen how to observe executions. By checking our observations against our expectations, we can find out when and how the program state is faulty. So far, we have assumed that this check would be done by humans – that is, us. However, having this check done by a computer, for instance as part of the execution, is infinitely more rigorous and efficient. In this chapter, we introduce techniques to specify our expectations and to check them at runtime, enabling us to detect faults right as they occur.">
<polygon fill="#ffffff" stroke="#000000" points="520.5,-112 426.5,-112 426.5,-74 526.5,-74 526.5,-106 520.5,-112"/>
<polyline fill="none" stroke="#000000" points="520.5,-112 520.5,-106 "/>
<polyline fill="none" stroke="#000000" points="526.5,-106 520.5,-106 "/>
<text text-anchor="middle" x="476.5" y="-96.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Asserting</text>
<text text-anchor="middle" x="476.5" y="-81.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Expectations</text>
</a>
</g>
</g>
<!-- Tracer&#45;&gt;Assertions -->
<g id="edge2" class="edge">
<title>Tracer&#45;&gt;Assertions</title>
<path fill="none" stroke="#000000" d="M420.0393,-148.7079C429.0268,-139.8403 439.986,-129.0272 449.8495,-119.2952"/>
<polygon fill="#000000" stroke="#000000" points="452.4676,-121.6289 457.1277,-112.114 447.5511,-116.646 452.4676,-121.6289"/>
</g>
<!-- DeltaDebugger -->
<g id="node4" class="node">
<title>DeltaDebugger</title>
<g id="a_node4"><a xlink:href="DeltaDebugger.ipynb" xlink:title="Reducing Failure&#45;Inducing Inputs (DeltaDebugger)&#10;&#10;A standard problem in debugging is this: Your program fails after processing some large input. Only a part of this input, however, is responsible for the failure. Reducing the input to a failure&#45;inducing minimum not only eases debugging – it also helps in understanding why and when the program fails. In this chapter, we present techniques that automatically reduce and simplify failure&#45;inducing inputs to a minimum, notably the popular Delta Debugging technique.">
<polygon fill="#ffffff" stroke="#000000" points="670.5,-112 544.5,-112 544.5,-74 676.5,-74 676.5,-106 670.5,-112"/>
<polyline fill="none" stroke="#000000" points="670.5,-112 670.5,-106 "/>
<polyline fill="none" stroke="#000000" points="676.5,-106 670.5,-106 "/>
<text text-anchor="middle" x="610.5" y="-96.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Reducing Failure&#45;</text>
<text text-anchor="middle" x="610.5" y="-81.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Inducing Inputs</text>
</a>
</g>
</g>
<!-- Tracer&#45;&gt;DeltaDebugger -->
<g id="edge3" class="edge">
<title>Tracer&#45;&gt;DeltaDebugger</title>
<path fill="none" stroke="#000000" d="M452.3599,-148.9922C480.8166,-138.9166 516.5541,-126.2631 546.8534,-115.5352"/>
<polygon fill="#000000" stroke="#000000" points="548.2252,-118.7624 556.4836,-112.1254 545.8888,-112.1638 548.2252,-118.7624"/>
</g>
<!-- StatisticalDebugger -->
<g id="node5" class="node">
<title>StatisticalDebugger</title>
<g id="a_node5"><a xlink:href="StatisticalDebugger.ipynb" xlink:title="Statistical Debugging (StatisticalDebugger)&#10;&#10;In this chapter, we introduce statistical debugging – the idea that specific events during execution could be statistically correlated with failures. We start with coverage of individual lines and then proceed towards further execution features.">
<polygon fill="#ffffff" stroke="#000000" points="84,-112 1,-112 1,-74 90,-74 90,-106 84,-112"/>
<polyline fill="none" stroke="#000000" points="84,-112 84,-106 "/>
<polyline fill="none" stroke="#000000" points="90,-106 84,-106 "/>
<text text-anchor="middle" x="45.5" y="-96.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Statistical</text>
<text text-anchor="middle" x="45.5" y="-81.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Debugging</text>
</a>
</g>
</g>
<!-- Tracer&#45;&gt;StatisticalDebugger -->
<g id="edge4" class="edge">
<title>Tracer&#45;&gt;StatisticalDebugger</title>
<path fill="none" stroke="#000000" d="M331.2381,-157.4248C271.8724,-148.6012 184.5694,-133.9063 99.8955,-111.8894"/>
<polygon fill="#000000" stroke="#000000" points="100.681,-108.4769 90.1191,-109.3111 98.8959,-115.2455 100.681,-108.4769"/>
</g>
<!-- DynamicInvariants -->
<g id="node6" class="node">
<title>DynamicInvariants</title>
<g id="a_node6"><a xlink:href="DynamicInvariants.ipynb" xlink:title="Mining Function Specifications (DynamicInvariants)&#10;&#10;In the chapter on assertions, we have seen how important it is to check whether the result is as expected. &#160;In this chapter, we introduce a technique that allows us to mine function specifications from a set of given executions, resulting in abstract and formal descriptions of what the function expects and what it delivers.">
<polygon fill="#ffffff" stroke="#000000" points="222.5,-112 108.5,-112 108.5,-74 228.5,-74 228.5,-106 222.5,-112"/>
<polyline fill="none" stroke="#000000" points="222.5,-112 222.5,-106 "/>
<polyline fill="none" stroke="#000000" points="228.5,-106 222.5,-106 "/>
<text text-anchor="middle" x="168.5" y="-96.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Mining Function</text>
<text text-anchor="middle" x="168.5" y="-81.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Specifications</text>
</a>
</g>
</g>
<!-- Tracer&#45;&gt;DynamicInvariants -->
<g id="edge5" class="edge">
<title>Tracer&#45;&gt;DynamicInvariants</title>
<path fill="none" stroke="#000000" d="M344.7997,-148.9922C312.8006,-138.8294 272.5434,-126.0438 238.5793,-115.257"/>
<polygon fill="#000000" stroke="#000000" points="239.3096,-111.8167 228.7193,-112.1254 237.1907,-118.4883 239.3096,-111.8167"/>
</g>
<!-- ChangeDebugger -->
<g id="node10" class="node">
<title>ChangeDebugger</title>
<g id="a_node10"><a xlink:href="ChangeDebugger.ipynb" xlink:title="Isolating Failure&#45;Inducing Changes (ChangeDebugger)&#10;&#10;&quot;Yesterday, my program worked. Today, it does not. Why?&quot; In debugging, as elsewhere in software development, code keeps on changing. Thus, it can happen that a piece of code that yesterday was working perfectly, today no longer runs – because we (or others) have made some changes to it that cause it to fail. The good news is that for debugging, we can actually exploit this version history to narrow down the changes that caused the failure – be it by us or by others.">
<polygon fill="#ffffff" stroke="#000000" points="504,-38 377,-38 377,0 510,0 510,-32 504,-38"/>
<polyline fill="none" stroke="#000000" points="504,-38 504,-32 "/>
<polyline fill="none" stroke="#000000" points="510,-32 504,-32 "/>
<text text-anchor="middle" x="443.5" y="-22.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Isolating Failure&#45;</text>
<text text-anchor="middle" x="443.5" y="-7.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Inducing Changes</text>
</a>
</g>
</g>
<!-- DeltaDebugger&#45;&gt;ChangeDebugger -->
<g id="edge9" class="edge">
<title>DeltaDebugger&#45;&gt;ChangeDebugger</title>
<path fill="none" stroke="#000000" d="M567.4934,-73.9432C545.6639,-64.2702 518.9625,-52.4385 495.9366,-42.2354"/>
<polygon fill="#000000" stroke="#000000" points="497.2114,-38.9721 486.6508,-38.1207 494.3755,-45.3719 497.2114,-38.9721"/>
</g>
<!-- ThreadDebugger -->
<g id="node11" class="node">
<title>ThreadDebugger</title>
<g id="a_node11"><a xlink:href="ThreadDebugger.ipynb" xlink:title="Debugging Concurrent Programs (ThreadDebugger)&#10;&#10;Brief abstract/introduction/motivation. &#160;State what the chapter is about in 1&#45;2 paragraphs.&#10;Then, have an introduction video:">
<polygon fill="#ffffff" stroke="#000000" points="687,-38 528,-38 528,0 693,0 693,-32 687,-38"/>
<polyline fill="none" stroke="#000000" points="687,-38 687,-32 "/>
<polyline fill="none" stroke="#000000" points="693,-32 687,-32 "/>
<text text-anchor="middle" x="610.5" y="-22.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Debugging Concurrent</text>
<text text-anchor="middle" x="610.5" y="-7.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Programs</text>
</a>
</g>
</g>
<!-- DeltaDebugger&#45;&gt;ThreadDebugger -->
<g id="edge10" class="edge">
<title>DeltaDebugger&#45;&gt;ThreadDebugger</title>
<path fill="none" stroke="#000000" d="M610.5,-73.9432C610.5,-66.1493 610.5,-56.9538 610.5,-48.3381"/>
<polygon fill="#000000" stroke="#000000" points="614.0001,-48.2494 610.5,-38.2495 607.0001,-48.2495 614.0001,-48.2494"/>
</g>
<!-- DDSetDebugger -->
<g id="node12" class="node">
<title>DDSetDebugger</title>
<g id="a_node12"><a xlink:href="DDSetDebugger.ipynb" xlink:title="Generalizing Failure Circumstances (DDSetDebugger)&#10;&#10;One central question in debugging is: Does this bug occur in other situations, too? In this chapter, we present a technique that is set to generalize the circumstances under which a failure occurs. The DDSET algorithm takes a failure&#45;inducing input, breaks it into individual elements. For each element, it tries to find whether it can be replaced by others in the same category, and if so, it generalizes the concrete element to the very category. The result is a pattern that characterizes the failure condition: &quot;The failure occurs for all inputs of the form (&lt;expr&gt; * &lt;expr&gt;).">
<polygon fill="#ffffff" stroke="#000000" points="850,-38 711,-38 711,0 856,0 856,-32 850,-38"/>
<polyline fill="none" stroke="#000000" points="850,-38 850,-32 "/>
<polyline fill="none" stroke="#000000" points="856,-32 850,-32 "/>
<text text-anchor="middle" x="783.5" y="-22.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Generalizing Failure</text>
<text text-anchor="middle" x="783.5" y="-7.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Circumstances</text>
</a>
</g>
</g>
<!-- DeltaDebugger&#45;&gt;DDSetDebugger -->
<g id="edge11" class="edge">
<title>DeltaDebugger&#45;&gt;DDSetDebugger</title>
<path fill="none" stroke="#000000" d="M655.0518,-73.9432C677.7661,-64.2272 705.5723,-52.3333 729.4973,-42.0994"/>
<polygon fill="#000000" stroke="#000000" points="730.9811,-45.2715 738.7988,-38.1207 728.2281,-38.8356 730.9811,-45.2715"/>
</g>
<!-- PerformanceDebugger -->
<g id="node13" class="node">
<title>PerformanceDebugger</title>
<g id="a_node13"><a xlink:href="PerformanceDebugger.ipynb" xlink:title="Debugging Performance Issues (PerformanceDebugger)&#10;&#10;Most chapters of this book deal with functional issues – that is, issues related to the functionality (or its absence) of the code in question. However, debugging can also involve nonfunctional issues, however – performance, usability, reliability, and more. In this chapter, we give a short introduction on how to debug such nonfunctional issues, notably performance issues.">
<polygon fill="#ffffff" stroke="#000000" points="139,-38 0,-38 0,0 145,0 145,-32 139,-38"/>
<polyline fill="none" stroke="#000000" points="139,-38 139,-32 "/>
<polyline fill="none" stroke="#000000" points="145,-32 139,-32 "/>
<text text-anchor="middle" x="72.5" y="-22.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Debugging</text>
<text text-anchor="middle" x="72.5" y="-7.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Performance Issues</text>
</a>
</g>
</g>
<!-- DeltaDebugger&#45;&gt;PerformanceDebugger -->
<g id="edge12" class="edge">
<title>DeltaDebugger&#45;&gt;PerformanceDebugger</title>
<path fill="none" stroke="#000000" d="M544.3555,-75.7136C541.3701,-75.1007 538.408,-74.5253 535.5,-74 391.1826,-47.93 353.0168,-56.2214 207.5,-38 190.6164,-35.8859 172.5691,-33.4607 155.3432,-31.066"/>
<polygon fill="#000000" stroke="#000000" points="155.6993,-27.5819 145.3108,-29.6622 154.7292,-34.5143 155.6993,-27.5819"/>
</g>
<!-- Repairer -->
<g id="node14" class="node">
<title>Repairer</title>
<g id="a_node14"><a xlink:href="Repairer.ipynb" xlink:title="Repairing Code Automatically (Repairer)&#10;&#10;So far, we have discussed how to track failures and how to locate defects in code. Let us now discuss how to repair defects – that is, to correct the code such that the failure no longer occurs. We will discuss how to repair code automatically – by systematically searching through possible fixes and evolving the most promising candidates.">
<polygon fill="#ffffff" stroke="#000000" points="326.5,-38 216.5,-38 216.5,0 332.5,0 332.5,-32 326.5,-38"/>
<polyline fill="none" stroke="#000000" points="326.5,-38 326.5,-32 "/>
<polyline fill="none" stroke="#000000" points="332.5,-32 326.5,-32 "/>
<text text-anchor="middle" x="274.5" y="-22.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Repairing Code</text>
<text text-anchor="middle" x="274.5" y="-7.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Automatically</text>
</a>
</g>
</g>
<!-- DeltaDebugger&#45;&gt;Repairer -->
<g id="edge13" class="edge">
<title>DeltaDebugger&#45;&gt;Repairer</title>
<path fill="none" stroke="#000000" d="M544.2819,-76.0703C541.3165,-75.3609 538.3787,-74.6677 535.5,-74 499.5851,-65.6702 407.3722,-46.4242 342.7905,-33.0643"/>
<polygon fill="#000000" stroke="#000000" points="343.1772,-29.5703 332.6757,-30.9732 341.76,-36.4253 343.1772,-29.5703"/>
</g>
<!-- StatisticalDebugger&#45;&gt;PerformanceDebugger -->
<g id="edge14" class="edge">
<title>StatisticalDebugger&#45;&gt;PerformanceDebugger</title>
<path fill="none" stroke="#000000" d="M52.4532,-73.9432C55.3594,-65.978 58.7997,-56.549 62.0025,-47.7709"/>
<polygon fill="#000000" stroke="#000000" points="65.3368,-48.8434 65.4766,-38.2495 58.7609,-46.444 65.3368,-48.8434"/>
</g>
<!-- StatisticalDebugger&#45;&gt;Repairer -->
<g id="edge15" class="edge">
<title>StatisticalDebugger&#45;&gt;Repairer</title>
<path fill="none" stroke="#000000" d="M90.2491,-77.124C93.3758,-76.0551 96.4826,-75.0047 99.5,-74 134.6877,-62.2838 174.0746,-49.8458 206.559,-39.767"/>
<polygon fill="#000000" stroke="#000000" points="207.8889,-43.0193 216.4065,-36.7183 205.8187,-36.3324 207.8889,-43.0193"/>
</g>
<!-- Intro_Debugging -->
<g id="node7" class="node">
<title>Intro_Debugging</title>
<g id="a_node7"><a xlink:href="Intro_Debugging.ipynb" xlink:title="Introduction to Debugging (Intro_Debugging)&#10;&#10;In this book, we want to explore debugging &#45; the art and science of fixing bugs in computer software. In particular, we want to explore techniques that automatically answer questions like: Where is the bug? When does it occur? And how can we repair it? But before we start automating the debugging process, we first need to understand what this process is.">
<polygon fill="#ffffff" stroke="#000000" points="642.5,-260 536.5,-260 536.5,-222 648.5,-222 648.5,-254 642.5,-260"/>
<polyline fill="none" stroke="#000000" points="642.5,-260 642.5,-254 "/>
<polyline fill="none" stroke="#000000" points="648.5,-254 642.5,-254 "/>
<text text-anchor="middle" x="592.5" y="-244.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Introduction to</text>
<text text-anchor="middle" x="592.5" y="-229.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Debugging</text>
</a>
</g>
</g>
<!-- Intro_Debugging&#45;&gt;Tracer -->
<g id="edge6" class="edge">
<title>Intro_Debugging&#45;&gt;Tracer</title>
<path fill="none" stroke="#000000" d="M543.3128,-221.9432C517.1113,-211.7918 484.7729,-199.2628 457.5968,-188.7338"/>
<polygon fill="#000000" stroke="#000000" points="458.8072,-185.4493 448.2181,-185.1002 456.2783,-191.9766 458.8072,-185.4493"/>
</g>
<!-- Slicer -->
<g id="node8" class="node">
<title>Slicer</title>
<g id="a_node8"><a xlink:href="Slicer.ipynb" xlink:title="Tracking Failure Origins (Slicer)&#10;&#10;The question of &quot;Where does this value come from?&quot; is fundamental for debugging. Which earlier variables could possibly have influenced the current erroneous state? And how did their values come to be?">
<polygon fill="#ffffff" stroke="#000000" points="641,-186 538,-186 538,-148 647,-148 647,-180 641,-186"/>
<polyline fill="none" stroke="#000000" points="641,-186 641,-180 "/>
<polyline fill="none" stroke="#000000" points="647,-180 641,-180 "/>
<text text-anchor="middle" x="592.5" y="-170.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Tracking </text>
<text text-anchor="middle" x="592.5" y="-155.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Failure Origins</text>
</a>
</g>
</g>
<!-- Intro_Debugging&#45;&gt;Slicer -->
<g id="edge7" class="edge">
<title>Intro_Debugging&#45;&gt;Slicer</title>
<path fill="none" stroke="#000000" d="M592.5,-221.9432C592.5,-214.1493 592.5,-204.9538 592.5,-196.3381"/>
<polygon fill="#000000" stroke="#000000" points="596.0001,-196.2494 592.5,-186.2495 589.0001,-196.2495 596.0001,-196.2494"/>
</g>
<!-- Tracking -->
<g id="node9" class="node">
<title>Tracking</title>
<g id="a_node9"><a xlink:href="Tracking.ipynb" xlink:title="Tracking Bugs (Tracking)&#10;&#10;So far, we have assumed that failures would be discovered and fixed by a single programmer during development. But what if the user who discovers a bug is different from the developer who eventually fixes it? In this case, users have to report bugs, and one needs to ensure that reported bugs are systematically tracked. This is the job of dedicated bug tracking systems, which we will discuss (and demo) in this chapter.">
<polygon fill="#ffffff" stroke="#000000" points="792,-185 689,-185 689,-149 798,-149 798,-179 792,-185"/>
<polyline fill="none" stroke="#000000" points="792,-185 792,-179 "/>
<polyline fill="none" stroke="#000000" points="798,-179 792,-179 "/>
<text text-anchor="middle" x="743.5" y="-163.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Tracking Bugs</text>
</a>
</g>
</g>
<!-- Intro_Debugging&#45;&gt;Tracking -->
<g id="edge8" class="edge">
<title>Intro_Debugging&#45;&gt;Tracking</title>
<path fill="none" stroke="#000000" d="M631.3863,-221.9432C651.5578,-212.0578 676.3301,-199.9177 697.4542,-189.5655"/>
<polygon fill="#000000" stroke="#000000" points="699.1263,-192.6438 706.5658,-185.1002 696.0459,-186.358 699.1263,-192.6438"/>
</g>
<!-- ChangeCounter -->
<g id="node15" class="node">
<title>ChangeCounter</title>
<g id="a_node15"><a xlink:href="ChangeCounter.ipynb" xlink:title="Where the Bugs are (ChangeCounter)&#10;&#10;Every time a bug is fixed, developers leave a trace – in the version database when they commit the fix, or in the bug database when they close the bug. In this chapter, we learn how to mine these repositories for past changes and bugs, and how to map them to individual modules and functions, highlighting those project components that have seen most changes and fixes over time.">
<polygon fill="#ffffff" stroke="#000000" points="834.5,-111 694.5,-111 694.5,-75 840.5,-75 840.5,-105 834.5,-111"/>
<polyline fill="none" stroke="#000000" points="834.5,-111 834.5,-105 "/>
<polyline fill="none" stroke="#000000" points="840.5,-105 834.5,-105 "/>
<text text-anchor="middle" x="767.5" y="-89.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Where the Bugs are</text>
</a>
</g>
</g>
<!-- Tracking&#45;&gt;ChangeCounter -->
<g id="edge16" class="edge">
<title>Tracking&#45;&gt;ChangeCounter</title>
<path fill="none" stroke="#000000" d="M749.4326,-148.7079C752.1645,-140.2843 755.4659,-130.1052 758.4952,-120.7649"/>
<polygon fill="#000000" stroke="#000000" points="761.8798,-121.6737 761.6357,-111.0817 755.2213,-119.5142 761.8798,-121.6737"/>
</g>
</g>
</svg>
