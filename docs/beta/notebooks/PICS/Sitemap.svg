<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.40.1 (20161225.0304)
 -->
<!-- Title: %3 Pages: 1 -->
<svg width="438pt" height="268pt"
 viewBox="0.00 0.00 438.00 268.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 264)">
<title>%3</title>
<polygon fill="#ffffff" stroke="transparent" points="-4,4 -4,-264 434,-264 434,4 -4,4"/>
<!-- Tracer -->
<g id="node1" class="node">
<title>Tracer</title>
<g id="a_node1"><a xlink:href="Tracer.ipynb" xlink:title="Tracing Executions (Tracer)&#10;&#10;In this chapter, we show how to observe program state during an execution – a prerequisite for logging and interactive debugging. Thanks to the power of Python, we can do this in a few lines of code.">
<polygon fill="#ffffff" stroke="#000000" points="293.5,-185 159.5,-185 159.5,-149 299.5,-149 299.5,-179 293.5,-185"/>
<polyline fill="none" stroke="#000000" points="293.5,-185 293.5,-179 "/>
<polyline fill="none" stroke="#000000" points="299.5,-179 293.5,-179 "/>
<text text-anchor="middle" x="229.5" y="-163.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Tracing Executions</text>
</a>
</g>
</g>
<!-- Debugger -->
<g id="node2" class="node">
<title>Debugger</title>
<g id="a_node2"><a xlink:href="Debugger.ipynb" xlink:title="How Debuggers Work (Debugger)&#10;&#10;Interactive debuggers are tools that allow you to selectively observe the program state during an execution. &#160;In this chapter, you will learn how such debuggers work – by building your own debugger.">
<polygon fill="#ffffff" stroke="#000000" points="155,-111 0,-111 0,-75 161,-75 161,-105 155,-111"/>
<polyline fill="none" stroke="#000000" points="155,-111 155,-105 "/>
<polyline fill="none" stroke="#000000" points="161,-105 155,-105 "/>
<text text-anchor="middle" x="80.5" y="-89.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">How Debuggers Work</text>
</a>
</g>
</g>
<!-- Tracer&#45;&gt;Debugger -->
<g id="edge1" class="edge">
<title>Tracer&#45;&gt;Debugger</title>
<path fill="none" stroke="#000000" d="M193.0505,-148.8976C172.7718,-138.8263 147.3517,-126.2015 125.803,-115.4995"/>
<polygon fill="#000000" stroke="#000000" points="127.3442,-112.3571 116.8311,-111.0436 124.2306,-118.6265 127.3442,-112.3571"/>
</g>
<!-- Assertions -->
<g id="node3" class="node">
<title>Assertions</title>
<g id="a_node3"><a xlink:href="Assertions.ipynb" xlink:title="Asserting Expectations (Assertions)&#10;&#10;In the previous chapters on tracing and interactive debugging, we have seen how to observe executions. By checking our observations against our expectations, we can find out when and how the program state is faulty. So far, we have assumed that this check would be done by humans – that is, us. However, having this check done by a computer, for instance as part of the execution, is infinitely more rigorous and efficient. In this chapter, we introduce techniques to specify our expectations and to check them at runtime, enabling us to detect faults right as they occur.">
<polygon fill="#ffffff" stroke="#000000" points="273.5,-112 179.5,-112 179.5,-74 279.5,-74 279.5,-106 273.5,-112"/>
<polyline fill="none" stroke="#000000" points="273.5,-112 273.5,-106 "/>
<polyline fill="none" stroke="#000000" points="279.5,-106 273.5,-106 "/>
<text text-anchor="middle" x="229.5" y="-96.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Asserting</text>
<text text-anchor="middle" x="229.5" y="-81.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Expectations</text>
</a>
</g>
</g>
<!-- Tracer&#45;&gt;Assertions -->
<g id="edge2" class="edge">
<title>Tracer&#45;&gt;Assertions</title>
<path fill="none" stroke="#000000" d="M229.5,-148.7079C229.5,-140.7096 229.5,-131.1287 229.5,-122.1859"/>
<polygon fill="#000000" stroke="#000000" points="233.0001,-122.1139 229.5,-112.114 226.0001,-122.114 233.0001,-122.1139"/>
</g>
<!-- DeltaDebugger -->
<g id="node4" class="node">
<title>DeltaDebugger</title>
<g id="a_node4"><a xlink:href="DeltaDebugger.ipynb" xlink:title="Reducing Failure&#45;Inducing Inputs (DeltaDebugger)&#10;&#10;A standard problem in debugging is this: Your program fails after processing some large input. Only a part of this input, however, is responsible for the failure. Reducing the input to a failure&#45;inducing minimum not only eases debugging – it also helps in understanding why and when the program fails. In this chapter, we present techniques that automatically reduce and simplify failure&#45;inducing inputs to a minimum, notably the popular Delta Debugging technique.">
<polygon fill="#ffffff" stroke="#000000" points="423.5,-112 297.5,-112 297.5,-74 429.5,-74 429.5,-106 423.5,-112"/>
<polyline fill="none" stroke="#000000" points="423.5,-112 423.5,-106 "/>
<polyline fill="none" stroke="#000000" points="429.5,-106 423.5,-106 "/>
<text text-anchor="middle" x="363.5" y="-96.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Reducing Failure&#45;</text>
<text text-anchor="middle" x="363.5" y="-81.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Inducing Inputs</text>
</a>
</g>
</g>
<!-- Tracer&#45;&gt;DeltaDebugger -->
<g id="edge3" class="edge">
<title>Tracer&#45;&gt;DeltaDebugger</title>
<path fill="none" stroke="#000000" d="M262.2801,-148.8976C279.5924,-139.3371 301.0714,-127.4755 319.7833,-117.142"/>
<polygon fill="#000000" stroke="#000000" points="321.6547,-120.1069 328.7165,-112.2088 318.2707,-113.9792 321.6547,-120.1069"/>
</g>
<!-- ChangeDebugger -->
<g id="node7" class="node">
<title>ChangeDebugger</title>
<g id="a_node7"><a xlink:href="ChangeDebugger.ipynb" xlink:title="Isolating Failure&#45;Inducing Changes (ChangeDebugger)&#10;&#10;&quot;Yesterday, my program worked. Today, it does not. Why?&quot; In debugging, as elsewhere in software development, code keeps on changing. Thus, it can happen that a piece of code that yesterday was working perfectly, today no longer runs – because we (or others) have made some changes to it that cause it to fail. The good news is that for debugging, we can actually exploit this version history to narrow down the changes that caused the failure – be it by us or by others.">
<polygon fill="#ffffff" stroke="#000000" points="424,-38 297,-38 297,0 430,0 430,-32 424,-38"/>
<polyline fill="none" stroke="#000000" points="424,-38 424,-32 "/>
<polyline fill="none" stroke="#000000" points="430,-32 424,-32 "/>
<text text-anchor="middle" x="363.5" y="-22.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Isolating Failure&#45;</text>
<text text-anchor="middle" x="363.5" y="-7.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Inducing Changes</text>
</a>
</g>
</g>
<!-- DeltaDebugger&#45;&gt;ChangeDebugger -->
<g id="edge6" class="edge">
<title>DeltaDebugger&#45;&gt;ChangeDebugger</title>
<path fill="none" stroke="#000000" d="M363.5,-73.9432C363.5,-66.1493 363.5,-56.9538 363.5,-48.3381"/>
<polygon fill="#000000" stroke="#000000" points="367.0001,-48.2494 363.5,-38.2495 360.0001,-48.2495 367.0001,-48.2494"/>
</g>
<!-- Intro_Debugging -->
<g id="node5" class="node">
<title>Intro_Debugging</title>
<g id="a_node5"><a xlink:href="Intro_Debugging.ipynb" xlink:title="Introduction to Debugging (Intro_Debugging)&#10;&#10;In this book, we want to explore debugging &#45; the art and science of fixing bugs in computer software. In particular, we want to explore techniques that automatically answer questions like: Where is the bug? When does it occur? And how can we repair it? But before we start automating the debugging process, we first need to understand what this process is.">
<polygon fill="#ffffff" stroke="#000000" points="350.5,-260 244.5,-260 244.5,-222 356.5,-222 356.5,-254 350.5,-260"/>
<polyline fill="none" stroke="#000000" points="350.5,-260 350.5,-254 "/>
<polyline fill="none" stroke="#000000" points="356.5,-254 350.5,-254 "/>
<text text-anchor="middle" x="300.5" y="-244.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Introduction to</text>
<text text-anchor="middle" x="300.5" y="-229.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Debugging</text>
</a>
</g>
</g>
<!-- Intro_Debugging&#45;&gt;Tracer -->
<g id="edge4" class="edge">
<title>Intro_Debugging&#45;&gt;Tracer</title>
<path fill="none" stroke="#000000" d="M282.2157,-221.9432C273.6567,-213.0225 263.336,-202.2657 254.104,-192.6436"/>
<polygon fill="#000000" stroke="#000000" points="256.4368,-190.0195 246.9879,-185.2269 251.3857,-194.8659 256.4368,-190.0195"/>
</g>
<!-- Slicer -->
<g id="node6" class="node">
<title>Slicer</title>
<g id="a_node6"><a xlink:href="Slicer.ipynb" xlink:title="Tracking Failure Origins (Slicer)&#10;&#10;The question of &quot;Where does this value come from?&quot; is fundamental for debugging. Which earlier variables could possibly have influenced the current erroneous state? And how did their values come to be?">
<polygon fill="#ffffff" stroke="#000000" points="421,-186 318,-186 318,-148 427,-148 427,-180 421,-186"/>
<polyline fill="none" stroke="#000000" points="421,-186 421,-180 "/>
<polyline fill="none" stroke="#000000" points="427,-180 421,-180 "/>
<text text-anchor="middle" x="372.5" y="-170.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Tracking </text>
<text text-anchor="middle" x="372.5" y="-155.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Failure Origins</text>
</a>
</g>
</g>
<!-- Intro_Debugging&#45;&gt;Slicer -->
<g id="edge5" class="edge">
<title>Intro_Debugging&#45;&gt;Slicer</title>
<path fill="none" stroke="#000000" d="M319.0418,-221.9432C327.4584,-213.2928 337.5548,-202.9159 346.6954,-193.5214"/>
<polygon fill="#000000" stroke="#000000" points="349.3058,-195.8575 353.7708,-186.2495 344.2887,-190.976 349.3058,-195.8575"/>
</g>
</g>
</svg>
