<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.40.1 (20161225.0304)
 -->
<!-- Title: %3 Pages: 1 -->
<svg width="684pt" height="268pt"
 viewBox="0.00 0.00 683.50 268.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 264)">
<title>%3</title>
<polygon fill="#ffffff" stroke="transparent" points="-4,4 -4,-264 679.5,-264 679.5,4 -4,4"/>
<!-- Tracer -->
<g id="node1" class="node">
<title>Tracer</title>
<g id="a_node1"><a xlink:href="Tracer.ipynb" xlink:title="Tracing Executions (Tracer)&#10;&#10;In this chapter, we show how to observe program state during an execution – a prerequisite for logging and interactive debugging. Thanks to the power of Python, we can do this in a few lines of code.">
<polygon fill="#ffffff" stroke="#000000" points="427.5,-185 293.5,-185 293.5,-149 433.5,-149 433.5,-179 427.5,-185"/>
<polyline fill="none" stroke="#000000" points="427.5,-185 427.5,-179 "/>
<polyline fill="none" stroke="#000000" points="433.5,-179 427.5,-179 "/>
<text text-anchor="middle" x="363.5" y="-163.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Tracing Executions</text>
</a>
</g>
</g>
<!-- Debugger -->
<g id="node2" class="node">
<title>Debugger</title>
<g id="a_node2"><a xlink:href="Debugger.ipynb" xlink:title="How Debuggers Work (Debugger)&#10;&#10;Interactive debuggers are tools that allow you to selectively observe the program state during an execution. &#160;In this chapter, you will learn how such debuggers work – by building your own debugger.">
<polygon fill="#ffffff" stroke="#000000" points="155,-111 0,-111 0,-75 161,-75 161,-105 155,-111"/>
<polyline fill="none" stroke="#000000" points="155,-111 155,-105 "/>
<polyline fill="none" stroke="#000000" points="161,-105 155,-105 "/>
<text text-anchor="middle" x="80.5" y="-89.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">How Debuggers Work</text>
</a>
</g>
</g>
<!-- Tracer&#45;&gt;Debugger -->
<g id="edge1" class="edge">
<title>Tracer&#45;&gt;Debugger</title>
<path fill="none" stroke="#000000" d="M294.6323,-148.9922C253.8015,-138.3156 201.9006,-124.7443 159.4219,-113.6368"/>
<polygon fill="#000000" stroke="#000000" points="160.2367,-110.2323 149.6765,-111.0886 158.4658,-117.0046 160.2367,-110.2323"/>
</g>
<!-- Assertions -->
<g id="node3" class="node">
<title>Assertions</title>
<g id="a_node3"><a xlink:href="Assertions.ipynb" xlink:title="Asserting Expectations (Assertions)&#10;&#10;In the previous chapters on tracing and interactive debugging, we have seen how to observe executions. By checking our observations against our expectations, we can find out when and how the program state is faulty. So far, we have assumed that this check would be done by humans – that is, us. However, having this check done by a computer, for instance as part of the execution, is infinitely more rigorous and efficient. In this chapter, we introduce techniques to specify our expectations and to check them at runtime, enabling us to detect faults right as they occur.">
<polygon fill="#ffffff" stroke="#000000" points="273.5,-112 179.5,-112 179.5,-74 279.5,-74 279.5,-106 273.5,-112"/>
<polyline fill="none" stroke="#000000" points="273.5,-112 273.5,-106 "/>
<polyline fill="none" stroke="#000000" points="279.5,-106 273.5,-106 "/>
<text text-anchor="middle" x="229.5" y="-96.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Asserting</text>
<text text-anchor="middle" x="229.5" y="-81.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Expectations</text>
</a>
</g>
</g>
<!-- Tracer&#45;&gt;Assertions -->
<g id="edge2" class="edge">
<title>Tracer&#45;&gt;Assertions</title>
<path fill="none" stroke="#000000" d="M330.7199,-148.8976C313.4076,-139.3371 291.9286,-127.4755 273.2167,-117.142"/>
<polygon fill="#000000" stroke="#000000" points="274.7293,-113.9792 264.2835,-112.2088 271.3453,-120.1069 274.7293,-113.9792"/>
</g>
<!-- DeltaDebugger -->
<g id="node4" class="node">
<title>DeltaDebugger</title>
<g id="a_node4"><a xlink:href="DeltaDebugger.ipynb" xlink:title="Reducing Failure&#45;Inducing Inputs (DeltaDebugger)&#10;&#10;A standard problem in debugging is this: Your program fails after processing some large input. Only a part of this input, however, is responsible for the failure. Reducing the input to a failure&#45;inducing minimum not only eases debugging – it also helps in understanding why and when the program fails. In this chapter, we present techniques that automatically reduce and simplify failure&#45;inducing inputs to a minimum, notably the popular Delta Debugging technique.">
<polygon fill="#ffffff" stroke="#000000" points="423.5,-112 297.5,-112 297.5,-74 429.5,-74 429.5,-106 423.5,-112"/>
<polyline fill="none" stroke="#000000" points="423.5,-112 423.5,-106 "/>
<polyline fill="none" stroke="#000000" points="429.5,-106 423.5,-106 "/>
<text text-anchor="middle" x="363.5" y="-96.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Reducing Failure&#45;</text>
<text text-anchor="middle" x="363.5" y="-81.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Inducing Inputs</text>
</a>
</g>
</g>
<!-- Tracer&#45;&gt;DeltaDebugger -->
<g id="edge3" class="edge">
<title>Tracer&#45;&gt;DeltaDebugger</title>
<path fill="none" stroke="#000000" d="M363.5,-148.7079C363.5,-140.7096 363.5,-131.1287 363.5,-122.1859"/>
<polygon fill="#000000" stroke="#000000" points="367.0001,-122.1139 363.5,-112.114 360.0001,-122.114 367.0001,-122.1139"/>
</g>
<!-- StatisticalDebugger -->
<g id="node5" class="node">
<title>StatisticalDebugger</title>
<g id="a_node5"><a xlink:href="StatisticalDebugger.ipynb" xlink:title="Statistical Debugging (StatisticalDebugger)&#10;&#10;In this chapter, we introduce statistical debugging – the idea that specific events during execution could be statistically correlated with failures. We start with coverage of individual lines and then proceed towards further execution features.">
<polygon fill="#ffffff" stroke="#000000" points="531,-112 448,-112 448,-74 537,-74 537,-106 531,-112"/>
<polyline fill="none" stroke="#000000" points="531,-112 531,-106 "/>
<polyline fill="none" stroke="#000000" points="537,-106 531,-106 "/>
<text text-anchor="middle" x="492.5" y="-96.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Statistical</text>
<text text-anchor="middle" x="492.5" y="-81.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Debugging</text>
</a>
</g>
</g>
<!-- Tracer&#45;&gt;StatisticalDebugger -->
<g id="edge4" class="edge">
<title>Tracer&#45;&gt;StatisticalDebugger</title>
<path fill="none" stroke="#000000" d="M395.057,-148.8976C411.5717,-139.424 432.0252,-127.691 449.9226,-117.4242"/>
<polygon fill="#000000" stroke="#000000" points="452.0818,-120.2206 459.0144,-112.2088 448.5987,-114.1487 452.0818,-120.2206"/>
</g>
<!-- DynamicInvariants -->
<g id="node6" class="node">
<title>DynamicInvariants</title>
<g id="a_node6"><a xlink:href="DynamicInvariants.ipynb" xlink:title="Mining Function Specifications (DynamicInvariants)&#10;&#10;In the chapter on assertions, we have seen how important it is to check whether the result is as expected. &#160;In this chapter, we introduce a technique that allows us to mine function specifications from a set of given executions, resulting in abstract and formal descriptions of what the function expects and what it delivers.">
<polygon fill="#ffffff" stroke="#000000" points="669.5,-112 555.5,-112 555.5,-74 675.5,-74 675.5,-106 669.5,-112"/>
<polyline fill="none" stroke="#000000" points="669.5,-112 669.5,-106 "/>
<polyline fill="none" stroke="#000000" points="675.5,-106 669.5,-106 "/>
<text text-anchor="middle" x="615.5" y="-96.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Mining Function</text>
<text text-anchor="middle" x="615.5" y="-81.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Specifications</text>
</a>
</g>
</g>
<!-- Tracer&#45;&gt;DynamicInvariants -->
<g id="edge5" class="edge">
<title>Tracer&#45;&gt;DynamicInvariants</title>
<path fill="none" stroke="#000000" d="M424.8239,-148.9922C461.2006,-138.3101 507.4447,-124.7305 545.2809,-113.6199"/>
<polygon fill="#000000" stroke="#000000" points="546.6011,-116.8801 555.2098,-110.7043 544.6288,-110.1637 546.6011,-116.8801"/>
</g>
<!-- ChangeDebugger -->
<g id="node9" class="node">
<title>ChangeDebugger</title>
<g id="a_node9"><a xlink:href="ChangeDebugger.ipynb" xlink:title="Isolating Failure&#45;Inducing Changes (ChangeDebugger)&#10;&#10;&quot;Yesterday, my program worked. Today, it does not. Why?&quot; In debugging, as elsewhere in software development, code keeps on changing. Thus, it can happen that a piece of code that yesterday was working perfectly, today no longer runs – because we (or others) have made some changes to it that cause it to fail. The good news is that for debugging, we can actually exploit this version history to narrow down the changes that caused the failure – be it by us or by others.">
<polygon fill="#ffffff" stroke="#000000" points="250,-38 123,-38 123,0 256,0 256,-32 250,-38"/>
<polyline fill="none" stroke="#000000" points="250,-38 250,-32 "/>
<polyline fill="none" stroke="#000000" points="256,-32 250,-32 "/>
<text text-anchor="middle" x="189.5" y="-22.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Isolating Failure&#45;</text>
<text text-anchor="middle" x="189.5" y="-7.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Inducing Changes</text>
</a>
</g>
</g>
<!-- DeltaDebugger&#45;&gt;ChangeDebugger -->
<g id="edge8" class="edge">
<title>DeltaDebugger&#45;&gt;ChangeDebugger</title>
<path fill="none" stroke="#000000" d="M318.6907,-73.9432C295.8451,-64.2272 267.8782,-52.3333 243.8148,-42.0994"/>
<polygon fill="#000000" stroke="#000000" points="245.0317,-38.8136 234.4596,-38.1207 242.2921,-45.2553 245.0317,-38.8136"/>
</g>
<!-- DDSetDebugger -->
<g id="node10" class="node">
<title>DDSetDebugger</title>
<g id="a_node10"><a xlink:href="DDSetDebugger.ipynb" xlink:title="Generalizing Failure Circumstances (DDSetDebugger)&#10;&#10;One central question in debugging is: Does this bug occur in other situations, too? In this chapter, we present a technique that is set to generalize the circumstances under which a failure occurs. The DDSET algorithm takes a failure&#45;inducing input, breaks it into individual elements. For each element, it tries to find whether it can be replaced by others in the same category, and if so, it generalizes the concrete element to the very category. The result is a pattern that characterizes the failure condition: &quot;The failure occurs for all inputs of the form (&lt;expr&gt; * &lt;expr&gt;).">
<polygon fill="#ffffff" stroke="#000000" points="413,-38 274,-38 274,0 419,0 419,-32 413,-38"/>
<polyline fill="none" stroke="#000000" points="413,-38 413,-32 "/>
<polyline fill="none" stroke="#000000" points="419,-32 413,-32 "/>
<text text-anchor="middle" x="346.5" y="-22.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Generalizing Failure</text>
<text text-anchor="middle" x="346.5" y="-7.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Circumstances</text>
</a>
</g>
</g>
<!-- DeltaDebugger&#45;&gt;DDSetDebugger -->
<g id="edge9" class="edge">
<title>DeltaDebugger&#45;&gt;DDSetDebugger</title>
<path fill="none" stroke="#000000" d="M359.1221,-73.9432C357.3119,-66.0636 355.1727,-56.7516 353.1746,-48.0543"/>
<polygon fill="#000000" stroke="#000000" points="356.5724,-47.2119 350.9222,-38.2495 349.7501,-48.7793 356.5724,-47.2119"/>
</g>
<!-- PerformanceDebugger -->
<g id="node11" class="node">
<title>PerformanceDebugger</title>
<g id="a_node11"><a xlink:href="PerformanceDebugger.ipynb" xlink:title="Debugging Performance Issues (PerformanceDebugger)&#10;&#10;Most chapters of this book deal with functional issues – that is, issues related to the functionality (or its absence) of the code in question. However, debugging can also involve nonfunctional issues, however – performance, usability, reliability, and more. In this chapter, we give a short introduction on how to debug such nonfunctional issues, notably performance issues.">
<polygon fill="#ffffff" stroke="#000000" points="576,-38 437,-38 437,0 582,0 582,-32 576,-38"/>
<polyline fill="none" stroke="#000000" points="576,-38 576,-32 "/>
<polyline fill="none" stroke="#000000" points="582,-32 576,-32 "/>
<text text-anchor="middle" x="509.5" y="-22.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Debugging</text>
<text text-anchor="middle" x="509.5" y="-7.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Performance Issues</text>
</a>
</g>
</g>
<!-- DeltaDebugger&#45;&gt;PerformanceDebugger -->
<g id="edge10" class="edge">
<title>DeltaDebugger&#45;&gt;PerformanceDebugger</title>
<path fill="none" stroke="#000000" d="M401.0986,-73.9432C419.9286,-64.3992 442.9051,-52.7536 462.8503,-42.6443"/>
<polygon fill="#000000" stroke="#000000" points="464.438,-45.7636 471.7753,-38.1207 461.2733,-39.5198 464.438,-45.7636"/>
</g>
<!-- StatisticalDebugger&#45;&gt;PerformanceDebugger -->
<g id="edge11" class="edge">
<title>StatisticalDebugger&#45;&gt;PerformanceDebugger</title>
<path fill="none" stroke="#000000" d="M496.8779,-73.9432C498.6881,-66.0636 500.8273,-56.7516 502.8254,-48.0543"/>
<polygon fill="#000000" stroke="#000000" points="506.2499,-48.7793 505.0778,-38.2495 499.4276,-47.2119 506.2499,-48.7793"/>
</g>
<!-- Intro_Debugging -->
<g id="node7" class="node">
<title>Intro_Debugging</title>
<g id="a_node7"><a xlink:href="Intro_Debugging.ipynb" xlink:title="Introduction to Debugging (Intro_Debugging)&#10;&#10;In this book, we want to explore debugging &#45; the art and science of fixing bugs in computer software. In particular, we want to explore techniques that automatically answer questions like: Where is the bug? When does it occur? And how can we repair it? But before we start automating the debugging process, we first need to understand what this process is.">
<polygon fill="#ffffff" stroke="#000000" points="484.5,-260 378.5,-260 378.5,-222 490.5,-222 490.5,-254 484.5,-260"/>
<polyline fill="none" stroke="#000000" points="484.5,-260 484.5,-254 "/>
<polyline fill="none" stroke="#000000" points="490.5,-254 484.5,-254 "/>
<text text-anchor="middle" x="434.5" y="-244.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Introduction to</text>
<text text-anchor="middle" x="434.5" y="-229.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Debugging</text>
</a>
</g>
</g>
<!-- Intro_Debugging&#45;&gt;Tracer -->
<g id="edge6" class="edge">
<title>Intro_Debugging&#45;&gt;Tracer</title>
<path fill="none" stroke="#000000" d="M416.2157,-221.9432C407.6567,-213.0225 397.336,-202.2657 388.104,-192.6436"/>
<polygon fill="#000000" stroke="#000000" points="390.4368,-190.0195 380.9879,-185.2269 385.3857,-194.8659 390.4368,-190.0195"/>
</g>
<!-- Slicer -->
<g id="node8" class="node">
<title>Slicer</title>
<g id="a_node8"><a xlink:href="Slicer.ipynb" xlink:title="Tracking Failure Origins (Slicer)&#10;&#10;The question of &quot;Where does this value come from?&quot; is fundamental for debugging. Which earlier variables could possibly have influenced the current erroneous state? And how did their values come to be?">
<polygon fill="#ffffff" stroke="#000000" points="555,-186 452,-186 452,-148 561,-148 561,-180 555,-186"/>
<polyline fill="none" stroke="#000000" points="555,-186 555,-180 "/>
<polyline fill="none" stroke="#000000" points="561,-180 555,-180 "/>
<text text-anchor="middle" x="506.5" y="-170.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Tracking </text>
<text text-anchor="middle" x="506.5" y="-155.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Failure Origins</text>
</a>
</g>
</g>
<!-- Intro_Debugging&#45;&gt;Slicer -->
<g id="edge7" class="edge">
<title>Intro_Debugging&#45;&gt;Slicer</title>
<path fill="none" stroke="#000000" d="M453.0418,-221.9432C461.4584,-213.2928 471.5548,-202.9159 480.6954,-193.5214"/>
<polygon fill="#000000" stroke="#000000" points="483.3058,-195.8575 487.7708,-186.2495 478.2887,-190.976 483.3058,-195.8575"/>
</g>
</g>
</svg>
